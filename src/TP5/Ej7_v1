Utilizando For, en el ejemplo Ej7 utiliza while para hacer el corrimiento derecha.
//CORRIMIENTOS
//7. Implementar un método que realice un corrimiento a derecha en
//un arreglo ordenado de tamaño MAX=10 a partir de una posición.

import java.util.Random;
public class Main{
    public static final int MAX = 10, MAXVALOR = 10, MINVALOR = 1, POSICION = 5;
	public static void main(String[] args) {
	    int[] arr = new int[MAX];
	    cargar_arreglo_aleatorio_int(arr);
	    corrimientoDerecha(arr);
		
	}
	public static void corrimientoDerecha(int[] arr){
	    int j = MAX-1;
	    for(int i = j; i > POSICION; i--){
	    arr[i] = arr[i-1];
	    
	    }
	    imprimirArreglo(arr);
	}
	
	 public static void cargar_arreglo_aleatorio_int(int[] arr) {
        Random r = new Random();
        for (int pos = 0; pos < MAX; pos++) {
            arr[pos] = (r.nextInt(MAXVALOR - MINVALOR + 1) + MINVALOR);
        }
        imprimirArreglo(arr);
    }


    public static void imprimirArreglo(int[] arr) {
        for (int i = 0; i < MAX; i++) {
            System.out.print(arr[i] + "|");
        }
        System.out.println();
    }
}

//Tanto el bucle for como el bucle while pueden usarse para realizar el corrimiento a la derecha en el arreglo. La elección entre ellos depende de la preferencia y conveniencia del programador.

//En el caso del corrimiento a la derecha, el bucle for es comúnmente utilizado debido a su estructura concisa y su capacidad para iterar un número específico de veces. Dado que conocemos la cantidad exacta de iteraciones necesarias para realizar el corrimiento, un bucle for resulta adecuado. Además, al usar un bucle for, podemos controlar fácilmente la variable de iteración y usarla en la lógica del corrimiento.

//Por otro lado, un bucle while puede ser útil si no conocemos de antemano la cantidad exacta de iteraciones requeridas. Si el número de iteraciones depende de una condición o variable que puede cambiar durante la ejecución del bucle, un bucle while puede ser más apropiado.

//En resumen, para el caso específico del corrimiento a la derecha en un arreglo ordenado, donde el número de iteraciones es conocido y fijo, se suele preferir el bucle for. Sin embargo, si el número de iteraciones es variable o depende de una condición, el bucle while puede ser más adecuado. La elección depende del contexto y de la claridad y legibilidad del código.
